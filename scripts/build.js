process.env.NODE_ENV = 'production';
var fs = require('fs'),
    fsExtra = require('fs-extra'),
    mkdirp = require('mkdirp'),
    // page = require('./dev/bundleStaticPage.js'),
    webpack = require('webpack'),
    config = require('../webpack.config');


webpack(config, function (err, stats) {
    if (err) {
        console.log(err);
    } else {
        var page = require('../temp/bundleStaticPage.js');

        fs.readFile('src/index.html', 'utf8', (readFileError, dataFile) => {
            if (readFileError) {
                return console.log(readFileError);
            }

            let data =
                dataFile.replace('<div id=\'root\'></div>', page())
                    .replace('<script src="js/bundle.js"></script>', '')

            var minify = require('html-minifier').minify

            var result = minify(data, {
                "caseSensitive": false,
                "collapseBooleanAttributes": true,
                "collapseInlineTagWhitespace": false,
                "collapseWhitespace": true,
                "conservativeCollapse": false,
                "decodeEntities": true,
                "html5": true,
                "includeAutoGeneratedTags": false,
                "keepClosingSlash": false,
                "minifyCSS": false,
                "minifyJS": false,
                "preserveLineBreaks": false,
                "preventAttributesEscaping": false,
                "processConditionalComments": true,
                "processScripts": ["text/html"],
                "removeAttributeQuotes": true,
                "removeComments": true,
                "removeEmptyAttributes": true,
                "removeEmptyElements": false,
                "removeOptionalTags": true,
                "removeRedundantAttributes": true,
                "removeScriptTypeAttributes": true,
                "removeStyleLinkTypeAttributes": true,
                "removeTagWhitespace": true,
                "sortAttributes": true,
                "sortClassName": true,
                "trimCustomFragments": true,
                "useShortDoctype": true
            })

            mkdirp.sync('public');
            fs.writeFileSync('public/index.html', result)

            mkdirp.sync('public/css');
            fsExtra.copySync('temp/css/styles.css', 'public/css/styles.css')

            mkdirp.sync('public/img');
            fsExtra.copySync('temp/img', 'public/img')

            fsExtra.copySync('resources/favicon.ico', 'public/favicon.ico')
        });

    }

    console.log('build complete');

});

